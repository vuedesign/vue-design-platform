import { useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import {
    GithubOne,
    Home,
    Like,
    ThumbsUp,
    ThumbsDown,
    TagOne,
} from '@icon-park/react';
import { wrapper } from '@/modules/store';
import { site, sites, sitesAssociate } from '@/modules/services/siteApi';
import { count } from '@/modules/services/countApi';
import { SiteItem } from '@/modules/types/site';
import Top from '@/modules/components/Top';
import Footer from '@/modules/components/Footer';
import { getParamsByContext } from '@/modules/utils';
import Asider from '@/modules/components/Asider';
import styles from './Site.module.scss';
import { useLikeMutation } from '@/modules/services/authApi';
import { typeMap } from '@/configs/globals.contants';

export const getServerSideProps = wrapper.getServerSideProps(
    (store) => async (context) => {
        const uuid = getParamsByContext<typeof context>(context, 'uuid');
        const { data: siteItem } = await store.dispatch(site.initiate(uuid));
        const authorId = siteItem?.authorId;
        await store.dispatch(
            sitesAssociate.initiate({ authorId, size: 2, uuid }),
        );
        await store.dispatch(count.initiate(authorId));
        return {
            props: {
                siteItem,
            },
        };
    },
);

type SiteProps = {
    siteItem: SiteItem | undefined | null;
};

type SiteToolsProps = {
    siteItem: SiteItem;
};

const Tools = ({ siteItem }: SiteToolsProps) => {
    //  GithubOne, Home, Like, ThumbsUp, ThumbsDown
    const toolList = [
        {
            type: 'top',
            icon: (
                <ThumbsUp
                    theme="outline"
                    size="20"
                    fill="#666"
                    style={{ height: '20px' }}
                />
            ),
            badge: siteItem.top || 0,
        },
        {
            type: 'down',
            icon: (
                <ThumbsDown
                    theme="outline"
                    size="20"
                    fill="#666"
                    style={{ height: '20px' }}
                />
            ),
            badge: siteItem.down || 0,
        },
        {
            type: 'collections',
            icon: (
                <Like
                    theme="outline"
                    size="20"
                    fill="#666"
                    style={{ height: '20px' }}
                />
            ),
            badge: siteItem.collections || 0,
        },
    ];
    const [like, { isLoading }] = useLikeMutation();
    console.log('siteItem', siteItem);
    const handleClick = (item: any) => {
        console.log('item', item);
        like({
            type: item.type,
            siteId: siteItem.id || 0,
        });
    };
    return (
        <div className={styles.tools}>
            <ul>
                {toolList.map((item, index) => (
                    <li key={index}>
                        <span className={styles['tools-text']}>
                            {item.badge}
                        </span>
                        <span
                            onClick={() => handleClick(item)}
                            className={styles['tools-btn']}>
                            {item.icon}
                        </span>
                    </li>
                ))}
            </ul>
        </div>
    );
};

const Site: NextPage<SiteProps> = ({ siteItem }: SiteProps) => {
    return (
        <div className={styles.container}>
            <Head>
                <title>vue.design-site</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <header className={styles.header}>
                <Top />
            </header>
            <section className={styles.main}>
                {siteItem && (
                    <>
                        <Asider
                            uuid={siteItem.uuid}
                            authorId={siteItem.authorId}
                            user={siteItem.author}
                        />
                        <article className={styles.article}>
                            <header className={styles.title}>
                                <h1>{siteItem.title}</h1>
                                <div className={styles.link}>
                                    {siteItem.codeUrl && (
                                        <Link
                                            href={siteItem.codeUrl}
                                            target="_blank">
                                            <span
                                                className={styles['link-btn']}>
                                                <GithubOne
                                                    theme="outline"
                                                    size="16"
                                                    fill="#666"
                                                    style={{ height: '16px' }}
                                                />
                                            </span>
                                        </Link>
                                    )}
                                    {siteItem.siteUrl && (
                                        <Link
                                            href={siteItem.siteUrl}
                                            target="_blank">
                                            <span
                                                className={styles['link-btn']}>
                                                <Home
                                                    theme="outline"
                                                    size="16"
                                                    fill="#666"
                                                    style={{ height: '16px' }}
                                                />
                                            </span>
                                        </Link>
                                    )}
                                </div>
                            </header>
                            <div className={styles.meta}>
                                {typeMap.has(siteItem.type) && (
                                    <span>[{typeMap.get(siteItem.type)}]</span>
                                )}
                                <span className={styles.dot}> · </span>
                                <time>{siteItem.createdAt}</time>
                                <span className={styles.dot}> · </span>
                                <span>阅读 {siteItem.views}</span>
                                <span className={styles.dot}> · </span>
                                {siteItem.tags && (
                                    <TagOne
                                        theme="outline"
                                        size="14"
                                        fill="#666"
                                        style={{ height: '14px' }}
                                    />
                                )}
                                {siteItem.tags &&
                                    siteItem.tags.map((item, index) => (
                                        <span
                                            className={styles.tag}
                                            key={index}>
                                            {item.name}
                                        </span>
                                    ))}
                            </div>
                            <div className={styles.content}>
                                {siteItem.description}
                            </div>
                            {siteItem && <Tools siteItem={siteItem} />}
                        </article>
                    </>
                )}
            </section>
            <Footer />
        </div>
    );
};

export default Site;
